<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="bsafe_app" timestamp="2024-08-09T08:57:11Z" hostname="71a38d8fd2fc" tests="2" skipped="0" failures="0" errors="0" time="11.726">
    <testcase time="7.634" classname="bsafe_app" name="bsafe_module_starts"/>
    <testcase time="4.092" classname="bsafe_app" name="tm_bsafe_starts"/>
  </testsuite>
  <testsuite name="decision_making" timestamp="2024-08-09T08:57:23Z" hostname="71a38d8fd2fc" tests="16" skipped="0" failures="0" errors="0" time="32.18">
    <testcase time="0.0180000000000007" classname="decision_making" name="calc_log_hazard_area_returns_correct_values"/>
    <testcase time="0.00300000000000011" classname="decision_making" name="calc_param_approx_boundaries_returns_correct_lower_and_upper_boundaries"/>
    <testcase time="12.823" classname="decision_making" name="can_read_and_change_distribution"/>
    <testcase time="1.987" classname="decision_making" name="can_read_and_change_non_ae_perc_slider"/>
    <testcase time="0.00900000000000034" classname="decision_making" name="ae_div_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="0.00799999999999912" classname="decision_making" name="inci_div_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="0.942" classname="decision_making" name="header_element_is_present"/>
    <testcase time="0.975000000000001" classname="decision_making" name="preface_element_is_present"/>
    <testcase time="1.051" classname="decision_making" name="plot_is_present"/>
    <testcase time="0.945" classname="decision_making" name="auc_text_element_is_present"/>
    <testcase time="0.983000000000001" classname="decision_making" name="preset_statements_table_is_present"/>
    <testcase time="2.235" classname="decision_making" name="exported_preset_statements_code_matches_output"/>
    <testcase time="2.416" classname="decision_making" name="exported_plot_code_matches_output"/>
    <testcase time="7.768" classname="decision_making" name="can_read_and_change_ae_perc_slider"/>
    <testcase time="0.00900000000000034" classname="decision_making" name="ae_div_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
    <testcase time="0.00800000000000267" classname="decision_making" name="inci_div_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
  </testsuite>
  <testsuite name="map_prior" timestamp="2024-08-09T08:57:55Z" hostname="71a38d8fd2fc" tests="4" skipped="0" failures="0" errors="1" time="0.363">
    <testcase time="0.344000000000001" classname="map_prior" name="preface_prior_txt_returns_correct_preface_for_MAP_approach"/>
    <testcase time="0.00399999999999778" classname="map_prior" name="preface_prior_txt_returns_correct_preface_for_log_scale_approach"/>
    <testcase time="0.00900000000000034" classname="map_prior" name="preface_prior_txt_returns_an_error_for_unknown_selection_analysis"/>
    <testcase time="0.00600000000000023" classname="map_prior" name="_unnamed_">
      <error type="error" message="Error in `eval(quote({ ('test-map_prior.R:26:3')">Error in `eval(quote({
    tns &lt;- tns_factory("mock")
    browser()
    app &lt;- shinytest2::AppDriver$new(teal.modules.bsafe:::mock_map_prior_mod())
    wait_value_idle(app, input = tns(BSAFE_ID$SEL_TAU))
    on.exit(if ("stop" %in% names(app)) app$stop())
    fail_if_app_not_started &lt;- function() {
        if (is.null(app)) rlang::abort("App could not be started")
    }
    test_that("map prior is calculated when button is pressed", 
        {
            app$click(tns("submit"))
            app$wait_for_idle(timeout = 180 * 1000)
            checkmate::expect_class(shiny::isolate(app$get_values()[["export"]][["r"]][["map_mcmc"]]()), 
                "gMAP")
        })
    test_that("forest plot is present", {
        plot &lt;- app$get_values()[["output"]][[tns(BSAFE_ID$OUT_FOREST_PLT)]]
        expect_true("src" %in% names(plot))
    })
    test_that("mix density plot is present", {
        plot &lt;- app$get_values()[["output"]][[tns(BSAFE_ID$OUT_MIX_DENSITY_PLT)]]
        expect_true("src" %in% names(plot))
    })
    test_that("preface prior text is present", {
        txt &lt;- app$get_values()[["output"]][[tns(BSAFE_ID$OUT_PREFACE_PRIOR_TXT)]][["html"]]
        checkmate::expect_string(txt, min.chars = 1)
    })
    test_that("density function is present", {
        txt &lt;- app$get_values()[["output"]][[tns(BSAFE_ID$OUT_DENSITY_FCT)]][["html"]]
        checkmate::expect_string(txt, min.chars = 1)
    })
    test_that("summary table is present", {
        tbl &lt;- app$get_values()[["output"]][[tns(BSAFE_ID$OUT_MAP_PRIOR_SUM_TBL)]]
        checkmate::expect_string(tbl, fixed = "&lt;table")
    })
    test_that("map_mcmc returned values is a gMAP object", {
        v &lt;- shiny::isolate(app$get_values()[["export"]][[tns("r")]][["map_mcmc"]]())
        checkmate::expect_class(v, "gMAP")
    })
    test_that("param_approx returned values is a EM object", 
        {
            v &lt;- shiny::isolate(app$get_values()[["export"]][[tns("r")]][["param_approx"]]())
            checkmate::expect_class(v, "EM")
        })
    test_that("adj_tau returned values is a numeric", {
        v &lt;- shiny::isolate(app$get_values()[["export"]][[tns("r")]][["adj_tau"]]())
        checkmate::expect_numeric(v)
    })
    test_that("ess_method is a subset from BSAFE_CHOICES$SEL_ESS_METHOD", 
        {
            v &lt;- shiny::isolate(app$get_values()[["export"]][[tns("r")]][["ess_method"]]())
            checkmate::expect_subset(v, BSAFE_CHOICES$SEL_ESS_METHOD)
        })
    test_that("forest_plot is a ggplot", {
        v &lt;- shiny::isolate(app$get_values()[["export"]][[tns("r")]][["forest_plot"]]())
        checkmate::expect_class(v, "ggplot")
    })
    test_that("map_summary_table is a data.frame", {
        v &lt;- shiny::isolate(app$get_values()[["export"]][[tns("r")]][["map_summary_table"]]())
        checkmate::expect_data_frame(v)
    })
    test_that("map_mcmc code eval matches print", {
        expect_code_print_match("map_mcmc", app)
    })
    test_that("param_approx code eval matches print", {
        expect_code_print_match("param_approx", app)
    })
    test_that("adj_tau code eval matches value", {
        expect_code_val_match("adj_tau", app)
    })
    test_that("forest plot code eval matches plot", {
        expect_code_plot_match("forest_plot", app)
    })
    test_that("map_summary_table code eval matches value", {
        expect_code_val_match("map_summary_table", app)
    })
    test_that("can read and change tau", {
        expected_value &lt;- "HalfNormal"
        app$set_inputs(`:=`(!!tns(BSAFE_ID$SEL_TAU), "Half-normal"))
        app$wait_for_idle()
        current_value &lt;- shiny::isolate(app$get_values()[["input"]][[tns(BSAFE_ID$SEL_TAU)]])
        expect_equal(current_value, expected_value)
    })
    test_that("can read and change hist borrow", {
        expected_value &lt;- "Small"
        app$set_inputs(`:=`(!!tns(BSAFE_ID$SEL_HIST_BORROW), 
            expected_value))
        app$wait_for_idle()
        current_value &lt;- shiny::isolate(app$get_values()[["input"]][[tns(BSAFE_ID$SEL_HIST_BORROW)]])
        expect_equal(current_value, expected_value)
    })
    test_that("can read and change effective sampling method", 
        {
            expected_value &lt;- "elir"
            app$set_inputs(`:=`(!!tns(BSAFE_ID$SEL_ESS_METHOD), 
                "Expected Local Information Ratio"))
            app$wait_for_idle()
            current_value &lt;- shiny::isolate(app$get_values()[["input"]][[tns(BSAFE_ID$SEL_ESS_METHOD)]])
            expect_equal(current_value, expected_value)
        })
    test_that("menu prior is invalidated when any change in the input values to map prior happens", 
        {
            button_id &lt;- c("invalidate_data", "invalidate_analysis", 
                "invalidate_seed")
            purrr::walk(button_id, function(id) {
                app$click(id)
                app$wait_for_idle()
                expect_error(class = "shiny.silent.error", shiny::isolate(app$get_values()[["export"]][["r"]][["map_mcmc"]]()))
                app$click(tns("submit"))
                app$wait_for_idle()
            })
            app$set_inputs(`:=`(!!tns(BSAFE_ID$SEL_HIST_BORROW), 
                "Large"))
            app$wait_for_idle()
            expect_error(class = "shiny.silent.error", shiny::isolate(app$get_values()[["export"]][["r"]][["map_mcmc"]]()))
        })
}), new.env())`: non-interactive browser() -- left over from debugging?
Backtrace:
    ▆
 1. └─base::eval(...)
 2.   └─base::eval(...)</error>
    </testcase>
  </testsuite>
  <testsuite name="new_trial_analysis" timestamp="2024-08-09T08:58:01Z" hostname="71a38d8fd2fc" tests="23" skipped="0" failures="0" errors="0" time="30.577">
    <testcase time="5.948" classname="new_trial_analysis" name="ae_div_side_and_main_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="0.00600000000000023" classname="new_trial_analysis" name="ae_div_side_and_main_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="0.00799999999999557" classname="new_trial_analysis" name="inci_div_side_and_main_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="0.00600000000000023" classname="new_trial_analysis" name="inci_div_side_and_main_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="2.094" classname="new_trial_analysis" name="can_read_and_change_number_of_patients"/>
    <testcase time="1.79000000000001" classname="new_trial_analysis" name="can_read_and_change_number_of_patients_with_AE"/>
    <testcase time="1.765" classname="new_trial_analysis" name="number_of_patients_with_AE_slider_is_updated_when_number_of_patients_change"/>
    <testcase time="1.721" classname="new_trial_analysis" name="number_of_patients_with_AE_slider_is_updated_when_number_of_patients_change"/>
    <testcase time="0.923999999999999" classname="new_trial_analysis" name="mix_density_plot_is_present"/>
    <testcase time="1.002" classname="new_trial_analysis" name="summary_table_is_present"/>
    <testcase time="0.926000000000002" classname="new_trial_analysis" name="new_trial_analysis_is_a_string"/>
    <testcase time="0.966999999999999" classname="new_trial_analysis" name="post_dist_is_a_string"/>
    <testcase time="0.982999999999997" classname="new_trial_analysis" name="current_trial_data_is_a_string"/>
    <testcase time="0.940999999999995" classname="new_trial_analysis" name="compare_plot_is_a_ggplot"/>
    <testcase time="1.033" classname="new_trial_analysis" name="map_summary_table_is_a_data.frame"/>
    <testcase time="1.53400000000001" classname="new_trial_analysis" name="compare_plot_code_eval_matches_plot"/>
    <testcase time="1.001" classname="new_trial_analysis" name="compare_summary_table_code_eval_matches_value"/>
    <testcase time="5.61699999999999" classname="new_trial_analysis" name="ae_div_side_and_main_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
    <testcase time="0.00600000000000023" classname="new_trial_analysis" name="ae_div_side_and_main_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
    <testcase time="0.00800000000000978" classname="new_trial_analysis" name="inci_div_side_and_main_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
    <testcase time="0.00600000000000023" classname="new_trial_analysis" name="inci_div_side_and_main_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
    <testcase time="1.19799999999999" classname="new_trial_analysis" name="can_read_and_change_first_occurence"/>
    <testcase time="1.093" classname="new_trial_analysis" name="can_read_and_change_cummulative_time"/>
  </testsuite>
  <testsuite name="robust_map" timestamp="2024-08-09T08:58:26Z" hostname="71a38d8fd2fc" tests="18" skipped="0" failures="0" errors="0" time="38.565">
    <testcase time="0.304000000000002" classname="robust_map" name="preface_rob_txt_returns_correct_preface_for_weakly_informative_conjugate_component"/>
    <testcase time="0.00300000000000011" classname="robust_map" name="preface_rob_txt_returns_correct_preface_for_EX_NEX_approach"/>
    <testcase time="0.00399999999999068" classname="robust_map" name="preface_rob_txt_returns_NULL_for_unknown_selection_analysis"/>
    <testcase time="6.009" classname="robust_map" name="robust_mean_div_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="2.617" classname="robust_map" name="can_read_and_informative_prior_weight"/>
    <testcase time="5.89100000000001" classname="robust_map" name="can_read_and_change_ess_method"/>
    <testcase time="1.374" classname="robust_map" name="robust_map_mcmc_is_data.frame"/>
    <testcase time="1.371" classname="robust_map" name="robust_plot_is_ggplot"/>
    <testcase time="1.404" classname="robust_map" name="robust_summary_is_data.frame"/>
    <testcase time="1.47800000000001" classname="robust_map" name="preface_text_is_present"/>
    <testcase time="1.39700000000001" classname="robust_map" name="density_function_is_present"/>
    <testcase time="1.437" classname="robust_map" name="robust_map_plot_is_present"/>
    <testcase time="1.527" classname="robust_map" name="table_is_present"/>
    <testcase time="1.98599999999999" classname="robust_map" name="robust_map_mcmc_code_eval_matches_value"/>
    <testcase time="2.02800000000001" classname="robust_map" name="robust_plot_code_eval_matches_value"/>
    <testcase time="1.476" classname="robust_map" name="robust_summary_code_eval_matches_value"/>
    <testcase time="5.741" classname="robust_map" name="robust_mean_div_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
    <testcase time="2.518" classname="robust_map" name="can_read_and_change_informative_prior_mean"/>
  </testsuite>
  <testsuite name="select_analysis" timestamp="2024-08-09T08:59:05Z" hostname="71a38d8fd2fc" tests="16" skipped="0" failures="0" errors="0" time="7.86">
    <testcase time="0.299999999999997" classname="select_analysis" name="get_arm_choices_and_selection_returns_correct_choices_when_previous_selection_is_empty"/>
    <testcase time="0.00400000000000489" classname="select_analysis" name="get_arm_choices_and_selection_returns_correct_selected_value_when_previous_selection_is_empty"/>
    <testcase time="0.00300000000000011" classname="select_analysis" name="get_arm_choices_and_selection_returns_correct_choices_when_previous_selection_is_not_empty"/>
    <testcase time="0.00399999999999068" classname="select_analysis" name="get_arm_choices_and_selection_returns_correct_selected_value_when_previous_selection_is_not_empty"/>
    <testcase time="0.00300000000000011" classname="select_analysis" name="get_safety_topic_choices_and_selection_returns_correct_choices_when_there_are_choices"/>
    <testcase time="0.00300000000000011" classname="select_analysis" name="get_safety_topic_choices_and_selection_returns_correct_selected_value_when_there_are_choices"/>
    <testcase time="0.00400000000000489" classname="select_analysis" name="get_safety_topic_choices_and_selection_returns_correct_choices_when_previous_selection_is_not_empty"/>
    <testcase time="0.00300000000000011" classname="select_analysis" name="get_safety_topic_choices_and_selection_returns_correct_selected_value_when_previous_selection_is_not_empty"/>
    <testcase time="0.00300000000000011" classname="select_analysis" name="get_safety_topic_choices_and_selection_returns_NULL_choices_when_there_are_no_choices"/>
    <testcase time="0.00499999999999545" classname="select_analysis" name="get_safety_topic_choices_and_selection_returns_NULL_selected_value_when_there_are_no_choices"/>
    <testcase time="3.56800000000001" classname="select_analysis" name="can_read_and_change_treatment"/>
    <testcase time="0.938999999999993" classname="select_analysis" name="can_read_and_change_change_analysis_type"/>
    <testcase time="0.945000000000007" classname="select_analysis" name="can_read_and_change_safety_topic"/>
    <testcase time="0.900999999999996" classname="select_analysis" name="can_read_and_change_seed"/>
    <testcase time="0.382999999999996" classname="select_analysis" name="returned_data_is_a_data.frame"/>
    <testcase time="0.792000000000002" classname="select_analysis" name="exported_data_code_matches_output"/>
  </testsuite>
  <testsuite name="utils" timestamp="2024-08-09T08:59:12Z" hostname="71a38d8fd2fc" tests="5" skipped="0" failures="0" errors="0" time="0.071">
    <testcase time="0.0580000000000069" classname="utils" name="_returns_a_when_a_is_not_NULL_not_NA_and_has_length_0"/>
    <testcase time="0.00399999999999068" classname="utils" name="_returns_b_when_a_is_NULL"/>
    <testcase time="0.00300000000000011" classname="utils" name="_returns_b_when_a_is_NA"/>
    <testcase time="0.00300000000000011" classname="utils" name="_returns_b_when_a_is_an_empty_vector"/>
    <testcase time="0.00300000000000011" classname="utils" name="_returns_b_when_a_is_a_vector_with_length_0"/>
  </testsuite>
</testsuites>
