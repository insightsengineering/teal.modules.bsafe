<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="bsafe_app" timestamp="2024-08-08T20:13:57Z" hostname="e5900bfa6906" tests="2" skipped="0" failures="0" errors="0" time="11.971">
    <testcase time="7.757" classname="bsafe_app" name="bsafe_module_starts"/>
    <testcase time="4.214" classname="bsafe_app" name="tm_bsafe_starts"/>
  </testsuite>
  <testsuite name="decision_making" timestamp="2024-08-08T20:14:09Z" hostname="e5900bfa6906" tests="16" skipped="0" failures="2" errors="1" time="33.004">
    <testcase time="0.0179999999999989" classname="decision_making" name="calc_log_hazard_area_returns_correct_values"/>
    <testcase time="0.00400000000000134" classname="decision_making" name="calc_param_approx_boundaries_returns_correct_lower_and_upper_boundaries"/>
    <testcase time="12.771" classname="decision_making" name="can_read_and_change_distribution"/>
    <testcase time="1.991" classname="decision_making" name="can_read_and_change_non_ae_perc_slider"/>
    <testcase time="0.0100000000000016" classname="decision_making" name="ae_div_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="0.00799999999999912" classname="decision_making" name="inci_div_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="0.955000000000002" classname="decision_making" name="header_element_is_present"/>
    <testcase time="0.959999999999997" classname="decision_making" name="preface_element_is_present"/>
    <testcase time="1.037" classname="decision_making" name="plot_is_present"/>
    <testcase time="0.957999999999998" classname="decision_making" name="auc_text_element_is_present">
      <failure type="failure" message="Check on 'auc_text' failed: Must be of type 'string', not 'list' ('test-decision_making.R:76:5')">Check on 'auc_text' failed: Must be of type 'string', not 'list'
Backtrace:
    ▆
 1. └─checkmate::expect_string(auc_text, min.chars = 1, null.ok = FALSE) at test-decision_making.R:76:5
 2.   └─checkmate::makeExpectation(x, res, info, label)</failure>
    </testcase>
    <testcase time="0.998999999999999" classname="decision_making" name="preset_statements_table_is_present">
      <failure type="failure" message="`opening_tag` has length 0, not length 1. ('test-decision_making.R:82:5')">`opening_tag` has length 0, not length 1.</failure>
    </testcase>
    <testcase time="1.302" classname="decision_making" name="exported_preset_statements_code_matches_output">
      <error type="error" message="Error in `bsafe::mix_distribution_all(current_trial_data = current_trial_data(),  ('test-decision_making.R:86:5')">Error in `bsafe::mix_distribution_all(current_trial_data = current_trial_data(), 
    select_dist = input[[BSAFE_ID$SEL_DIST]], select_analysis = analysis_type(), 
    param_approx = param_approx(), robust_map_object = robust_map_mcmc(), 
    post_dist = post_dist(), seed = seed())`: unused argument (seed = seed())
Backtrace:
     ▆
  1. ├─shiny::isolate(app$get_values()[["export"]][["r"]][["preset_statements"]]()) at test-decision_making.R:86:5
  2. │ ├─shiny::..stacktraceoff..(...)
  3. │ └─ctx$run(...)
  4. │   ├─promises::with_promise_domain(...)
  5. │   │ └─domain$wrapSync(expr)
  6. │   ├─shiny::withReactiveDomain(...)
  7. │   │ └─promises::with_promise_domain(...)
  8. │   │   └─domain$wrapSync(expr)
  9. │   │     └─base::force(expr)
 10. │   └─env$runWith(self, func)
 11. │     └─shiny (local) contextFunc()
 12. │       └─shiny::..stacktraceon..(expr)
 13. └─app$get_values()[["export"]][["r"]][["preset_statements"]]()
 14.   ├─shinymeta:::metaDispatch(...)
 15.   │ ├─shinymeta:::switchMetaMode(...)
 16.   │ └─base::force(normal)
 17.   └─shiny (local) r_normal()</error>
    </testcase>
    <testcase time="2.276" classname="decision_making" name="exported_plot_code_matches_output"/>
    <testcase time="9.698" classname="decision_making" name="can_read_and_change_ae_perc_slider"/>
    <testcase time="0.00900000000000034" classname="decision_making" name="ae_div_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
    <testcase time="0.00799999999999557" classname="decision_making" name="inci_div_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
  </testsuite>
  <testsuite name="map_prior" timestamp="2024-08-08T20:14:42Z" hostname="e5900bfa6906" tests="27" skipped="0" failures="0" errors="1" time="76.64">
    <testcase time="0.332000000000001" classname="map_prior" name="preface_prior_txt_returns_correct_preface_for_MAP_approach"/>
    <testcase time="0.00400000000000489" classname="map_prior" name="preface_prior_txt_returns_correct_preface_for_log_scale_approach"/>
    <testcase time="0.0069999999999979" classname="map_prior" name="preface_prior_txt_returns_an_error_for_unknown_selection_analysis"/>
    <testcase time="10.769" classname="map_prior" name="map_prior_is_calculated_when_button_is_pressed">
      <error type="error" message="Error in `app_wait_for_idle(self, private, duration = duration, timeout = timeout)`: An error occurred while waiting for Shiny to be stable ('test-map_prior.R:38:5')">Error in `app_wait_for_idle(self, private, duration = duration, timeout = timeout)`: An error occurred while waiting for Shiny to be stable
Backtrace:
    ▆
 1. └─app$wait_for_idle() at test-map_prior.R:38:5
 2.   └─shinytest2:::app_wait_for_idle(self, private, duration = duration, timeout = timeout)
 3.     └─shinytest2:::app_abort(self, private, "An error occurred while waiting for Shiny to be stable")
 4.       └─rlang::abort(..., app = self, call = call)</error>
    </testcase>
    <testcase time="1.573" classname="map_prior" name="forest_plot_is_present"/>
    <testcase time="1.44" classname="map_prior" name="mix_density_plot_is_present"/>
    <testcase time="1.435" classname="map_prior" name="preface_prior_text_is_present"/>
    <testcase time="1.445" classname="map_prior" name="density_function_is_present"/>
    <testcase time="1.59999999999999" classname="map_prior" name="summary_table_is_present"/>
    <testcase time="1.45800000000001" classname="map_prior" name="map_mcmc_returned_values_is_a_gMAP_object"/>
    <testcase time="1.48099999999999" classname="map_prior" name="param_approx_returned_values_is_a_EM_object"/>
    <testcase time="1.61499999999999" classname="map_prior" name="adj_tau_returned_values_is_a_numeric"/>
    <testcase time="1.85600000000001" classname="map_prior" name="ess_method_is_a_subset_from_BSAFE_CHOICES_SEL_ESS_METHOD"/>
    <testcase time="1.45999999999999" classname="map_prior" name="forest_plot_is_a_ggplot"/>
    <testcase time="1.48" classname="map_prior" name="map_summary_table_is_a_data.frame"/>
    <testcase time="5.331" classname="map_prior" name="map_mcmc_code_eval_matches_print"/>
    <testcase time="5.80099999999999" classname="map_prior" name="param_approx_code_eval_matches_print"/>
    <testcase time="1.43600000000001" classname="map_prior" name="adj_tau_code_eval_matches_value"/>
    <testcase time="5.413" classname="map_prior" name="forest_plot_code_eval_matches_plot"/>
    <testcase time="5.18300000000001" classname="map_prior" name="map_summary_table_code_eval_matches_value"/>
    <testcase time="5.97199999999999" classname="map_prior" name="can_read_and_change_tau"/>
    <testcase time="1.169" classname="map_prior" name="can_read_and_change_hist_borrow"/>
    <testcase time="5.104" classname="map_prior" name="can_read_and_change_effective_sampling_method"/>
    <testcase time="1.18100000000001" classname="map_prior" name="menu_prior_is_invalidated_when_any_change_in_the_input_values_to_map_prior_happens"/>
    <testcase time="4.30999999999999" classname="map_prior" name="menu_prior_is_invalidated_when_any_change_in_the_input_values_to_map_prior_happens"/>
    <testcase time="3.89100000000001" classname="map_prior" name="menu_prior_is_invalidated_when_any_change_in_the_input_values_to_map_prior_happens"/>
    <testcase time="3.89400000000001" classname="map_prior" name="menu_prior_is_invalidated_when_any_change_in_the_input_values_to_map_prior_happens"/>
  </testsuite>
  <testsuite name="new_trial_analysis" timestamp="2024-08-08T20:16:05Z" hostname="e5900bfa6906" tests="23" skipped="0" failures="1" errors="2" time="27.441">
    <testcase time="6.255" classname="new_trial_analysis" name="ae_div_side_and_main_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="0.00600000000000023" classname="new_trial_analysis" name="ae_div_side_and_main_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="0.00800000000000978" classname="new_trial_analysis" name="inci_div_side_and_main_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="0.00600000000000023" classname="new_trial_analysis" name="inci_div_side_and_main_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="1.78199999999998" classname="new_trial_analysis" name="can_read_and_change_number_of_patients"/>
    <testcase time="1.458" classname="new_trial_analysis" name="can_read_and_change_number_of_patients_with_AE"/>
    <testcase time="1.50200000000001" classname="new_trial_analysis" name="number_of_patients_with_AE_slider_is_updated_when_number_of_patients_change"/>
    <testcase time="1.42699999999999" classname="new_trial_analysis" name="number_of_patients_with_AE_slider_is_updated_when_number_of_patients_change"/>
    <testcase time="0.730999999999995" classname="new_trial_analysis" name="mix_density_plot_is_present"/>
    <testcase time="0.738" classname="new_trial_analysis" name="summary_table_is_present">
      <failure type="failure" message="Check on 'tbl' failed: Must be of type 'string', not 'list' ('test-new_trial_analysis.R:77:5')">Check on 'tbl' failed: Must be of type 'string', not 'list'
Backtrace:
    ▆
 1. └─checkmate::expect_string(tbl, fixed = "&lt;table") at test-new_trial_analysis.R:77:5
 2.   └─checkmate::makeExpectation(x, res, info, label)</failure>
    </testcase>
    <testcase time="0.739000000000004" classname="new_trial_analysis" name="new_trial_analysis_is_a_string"/>
    <testcase time="0.725999999999999" classname="new_trial_analysis" name="post_dist_is_a_string"/>
    <testcase time="0.725999999999999" classname="new_trial_analysis" name="current_trial_data_is_a_string"/>
    <testcase time="0.724000000000018" classname="new_trial_analysis" name="compare_plot_is_a_ggplot"/>
    <testcase time="0.758999999999986" classname="new_trial_analysis" name="map_summary_table_is_a_data.frame">
      <error type="error" message="Error in `bsafe::summary_stat_all_display(select_analysis = analysis_type(),  ('test-new_trial_analysis.R:101:5')">Error in `bsafe::summary_stat_all_display(select_analysis = analysis_type(), 
    robust_map_object = robust_map_mcmc(), ess_method = ess_method(), 
    current_trial_data = current_trial_data(), post_dist = post_dist(), 
    numerical = FALSE, seed = seed())`: unused arguments (numerical = FALSE, seed = seed())
Backtrace:
     ▆
  1. ├─shiny::isolate(app$get_values()[["export"]][[tns("r")]][["compare_summary_table"]]()) at test-new_trial_analysis.R:101:5
  2. │ ├─shiny::..stacktraceoff..(...)
  3. │ └─ctx$run(...)
  4. │   ├─promises::with_promise_domain(...)
  5. │   │ └─domain$wrapSync(expr)
  6. │   ├─shiny::withReactiveDomain(...)
  7. │   │ └─promises::with_promise_domain(...)
  8. │   │   └─domain$wrapSync(expr)
  9. │   │     └─base::force(expr)
 10. │   └─env$runWith(self, func)
 11. │     └─shiny (local) contextFunc()
 12. │       └─shiny::..stacktraceon..(expr)
 13. └─app$get_values()[["export"]][[tns("r")]][["compare_summary_table"]]()
 14.   ├─shinymeta:::metaDispatch(...)
 15.   │ ├─shinymeta:::switchMetaMode(...)
 16.   │ └─base::force(normal)
 17.   └─shiny (local) r_normal()</error>
    </testcase>
    <testcase time="0.995000000000005" classname="new_trial_analysis" name="compare_plot_code_eval_matches_plot"/>
    <testcase time="0.756" classname="new_trial_analysis" name="compare_summary_table_code_eval_matches_value">
      <error type="error" message="Error in `bsafe::summary_stat_all_display(select_analysis = analysis_type(),  ('test-new_trial_analysis.R:110:5')">Error in `bsafe::summary_stat_all_display(select_analysis = analysis_type(), 
    robust_map_object = robust_map_mcmc(), ess_method = ess_method(), 
    current_trial_data = current_trial_data(), post_dist = post_dist(), 
    numerical = FALSE, seed = seed())`: unused arguments (numerical = FALSE, seed = seed())
Backtrace:
     ▆
  1. └─teal.modules.bsafe:::expect_code_val_match(...) at test-new_trial_analysis.R:110:5
  2.   ├─shiny::isolate(export[["r"]][[n]]()) at tests/testthat/setup.R:22:3
  3.   │ ├─shiny::..stacktraceoff..(...)
  4.   │ └─ctx$run(...)
  5.   │   ├─promises::with_promise_domain(...)
  6.   │   │ └─domain$wrapSync(expr)
  7.   │   ├─shiny::withReactiveDomain(...)
  8.   │   │ └─promises::with_promise_domain(...)
  9.   │   │   └─domain$wrapSync(expr)
 10.   │   │     └─base::force(expr)
 11.   │   └─env$runWith(self, func)
 12.   │     └─shiny (local) contextFunc()
 13.   │       └─shiny::..stacktraceon..(expr)
 14.   └─export[["r"]][[n]]()
 15.     ├─shinymeta:::metaDispatch(...)
 16.     │ ├─shinymeta:::switchMetaMode(...)
 17.     │ └─base::force(normal)
 18.     └─shiny (local) r_normal()</error>
    </testcase>
    <testcase time="5.82900000000001" classname="new_trial_analysis" name="ae_div_side_and_main_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
    <testcase time="0.00600000000000023" classname="new_trial_analysis" name="ae_div_side_and_main_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
    <testcase time="0.00799999999998136" classname="new_trial_analysis" name="inci_div_side_and_main_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
    <testcase time="0.00600000000000023" classname="new_trial_analysis" name="inci_div_side_and_main_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
    <testcase time="1.19800000000001" classname="new_trial_analysis" name="can_read_and_change_first_occurence"/>
    <testcase time="1.05600000000001" classname="new_trial_analysis" name="can_read_and_change_cummulative_time"/>
  </testsuite>
  <testsuite name="robust_map" timestamp="2024-08-08T20:16:26Z" hostname="e5900bfa6906" tests="18" skipped="0" failures="1" errors="2" time="35.004">
    <testcase time="0.317999999999984" classname="robust_map" name="preface_rob_txt_returns_correct_preface_for_weakly_informative_conjugate_component"/>
    <testcase time="0.00300000000001432" classname="robust_map" name="preface_rob_txt_returns_correct_preface_for_EX_NEX_approach"/>
    <testcase time="0.00399999999999068" classname="robust_map" name="preface_rob_txt_returns_NULL_for_unknown_selection_analysis"/>
    <testcase time="5.947" classname="robust_map" name="robust_mean_div_is_hidden_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_1_"/>
    <testcase time="2.25399999999999" classname="robust_map" name="can_read_and_informative_prior_weight"/>
    <testcase time="5.745" classname="robust_map" name="can_read_and_change_ess_method"/>
    <testcase time="1.19900000000001" classname="robust_map" name="robust_map_mcmc_is_data.frame"/>
    <testcase time="1.22200000000001" classname="robust_map" name="robust_plot_is_ggplot"/>
    <testcase time="1.18699999999998" classname="robust_map" name="robust_summary_is_data.frame">
      <error type="error" message="Error in `bsafe::summary_stats_robust_map_prior_display(map_object = map_mcmc(),  ('test-robust_map.R:84:5')">Error in `bsafe::summary_stats_robust_map_prior_display(map_object = map_mcmc(), 
    select_analysis = analysis_type(), param_approx = param_approx(), 
    ess_method = ess_method(), robust_map_object = robust_map_mcmc(), 
    rob_ess_method = input[[BSAFE_ID$SEL_ROB_ESS_METHOD]], numerical = FALSE, 
    seed = seed())`: unused arguments (numerical = FALSE, seed = seed())
Backtrace:
     ▆
  1. ├─shiny::isolate(app$get_values()[["export"]][[tns("r")]][["robust_summary"]]()) at test-robust_map.R:84:5
  2. │ ├─shiny::..stacktraceoff..(...)
  3. │ └─ctx$run(...)
  4. │   ├─promises::with_promise_domain(...)
  5. │   │ └─domain$wrapSync(expr)
  6. │   ├─shiny::withReactiveDomain(...)
  7. │   │ └─promises::with_promise_domain(...)
  8. │   │   └─domain$wrapSync(expr)
  9. │   │     └─base::force(expr)
 10. │   └─env$runWith(self, func)
 11. │     └─shiny (local) contextFunc()
 12. │       └─shiny::..stacktraceon..(expr)
 13. └─app$get_values()[["export"]][[tns("r")]][["robust_summary"]]()
 14.   ├─shinymeta:::metaDispatch(...)
 15.   │ ├─shinymeta:::switchMetaMode(...)
 16.   │ └─base::force(normal)
 17.   └─shiny (local) r_normal()</error>
    </testcase>
    <testcase time="1.208" classname="robust_map" name="preface_text_is_present"/>
    <testcase time="1.23400000000001" classname="robust_map" name="density_function_is_present"/>
    <testcase time="1.209" classname="robust_map" name="robust_map_plot_is_present"/>
    <testcase time="1.233" classname="robust_map" name="table_is_present">
      <failure type="failure" message="Check on 'tbl' failed: Must be of type 'string', not 'list' ('test-robust_map.R:105:5')">Check on 'tbl' failed: Must be of type 'string', not 'list'
Backtrace:
    ▆
 1. └─checkmate::expect_string(tbl, fixed = "&lt;table") at test-robust_map.R:105:5
 2.   └─checkmate::makeExpectation(x, res, info, label)</failure>
    </testcase>
    <testcase time="1.48699999999999" classname="robust_map" name="robust_map_mcmc_code_eval_matches_value"/>
    <testcase time="1.47299999999998" classname="robust_map" name="robust_plot_code_eval_matches_value"/>
    <testcase time="1.21800000000002" classname="robust_map" name="robust_summary_code_eval_matches_value">
      <error type="error" message="Error in `bsafe::summary_stats_robust_map_prior_display(map_object = map_mcmc(),  ('test-robust_map.R:117:5')">Error in `bsafe::summary_stats_robust_map_prior_display(map_object = map_mcmc(), 
    select_analysis = analysis_type(), param_approx = param_approx(), 
    ess_method = ess_method(), robust_map_object = robust_map_mcmc(), 
    rob_ess_method = input[[BSAFE_ID$SEL_ROB_ESS_METHOD]], numerical = FALSE, 
    seed = seed())`: unused arguments (numerical = FALSE, seed = seed())
Backtrace:
     ▆
  1. └─teal.modules.bsafe:::expect_code_val_match(...) at test-robust_map.R:117:5
  2.   ├─shiny::isolate(export[["r"]][[n]]()) at tests/testthat/setup.R:22:3
  3.   │ ├─shiny::..stacktraceoff..(...)
  4.   │ └─ctx$run(...)
  5.   │   ├─promises::with_promise_domain(...)
  6.   │   │ └─domain$wrapSync(expr)
  7.   │   ├─shiny::withReactiveDomain(...)
  8.   │   │ └─promises::with_promise_domain(...)
  9.   │   │   └─domain$wrapSync(expr)
 10.   │   │     └─base::force(expr)
 11.   │   └─env$runWith(self, func)
 12.   │     └─shiny (local) contextFunc()
 13.   │       └─shiny::..stacktraceon..(expr)
 14.   └─export[["r"]][[n]]()
 15.     ├─shinymeta:::metaDispatch(...)
 16.     │ ├─shinymeta:::switchMetaMode(...)
 17.     │ └─base::force(normal)
 18.     └─shiny (local) r_normal()</error>
    </testcase>
    <testcase time="5.85899999999998" classname="robust_map" name="robust_mean_div_is_visible_when_analysis_type_is_BSAFE_CHOICES_SEL_ANALYSIS_2_"/>
    <testcase time="2.20400000000001" classname="robust_map" name="can_read_and_change_informative_prior_mean"/>
  </testsuite>
  <testsuite name="select_analysis" timestamp="2024-08-08T20:17:01Z" hostname="e5900bfa6906" tests="16" skipped="0" failures="0" errors="0" time="7.98">
    <testcase time="0.319000000000017" classname="select_analysis" name="get_arm_choices_and_selection_returns_correct_choices_when_previous_selection_is_empty"/>
    <testcase time="0.0029999999999859" classname="select_analysis" name="get_arm_choices_and_selection_returns_correct_selected_value_when_previous_selection_is_empty"/>
    <testcase time="0.00399999999999068" classname="select_analysis" name="get_arm_choices_and_selection_returns_correct_choices_when_previous_selection_is_not_empty"/>
    <testcase time="0.00300000000001432" classname="select_analysis" name="get_arm_choices_and_selection_returns_correct_selected_value_when_previous_selection_is_not_empty"/>
    <testcase time="0.0029999999999859" classname="select_analysis" name="get_safety_topic_choices_and_selection_returns_correct_choices_when_there_are_choices"/>
    <testcase time="0.0040000000000191" classname="select_analysis" name="get_safety_topic_choices_and_selection_returns_correct_selected_value_when_there_are_choices"/>
    <testcase time="0.0029999999999859" classname="select_analysis" name="get_safety_topic_choices_and_selection_returns_correct_choices_when_previous_selection_is_not_empty"/>
    <testcase time="0.00300000000001432" classname="select_analysis" name="get_safety_topic_choices_and_selection_returns_correct_selected_value_when_previous_selection_is_not_empty"/>
    <testcase time="0.00399999999999068" classname="select_analysis" name="get_safety_topic_choices_and_selection_returns_NULL_choices_when_there_are_no_choices"/>
    <testcase time="0.00399999999999068" classname="select_analysis" name="get_safety_topic_choices_and_selection_returns_NULL_selected_value_when_there_are_no_choices"/>
    <testcase time="3.65100000000001" classname="select_analysis" name="can_read_and_change_treatment"/>
    <testcase time="0.943999999999988" classname="select_analysis" name="can_read_and_change_change_analysis_type"/>
    <testcase time="0.960000000000008" classname="select_analysis" name="can_read_and_change_safety_topic"/>
    <testcase time="0.906000000000006" classname="select_analysis" name="can_read_and_change_seed"/>
    <testcase time="0.384999999999991" classname="select_analysis" name="returned_data_is_a_data.frame"/>
    <testcase time="0.783999999999992" classname="select_analysis" name="exported_data_code_matches_output"/>
  </testsuite>
  <testsuite name="utils" timestamp="2024-08-08T20:17:09Z" hostname="e5900bfa6906" tests="5" skipped="0" failures="0" errors="0" time="0.074">
    <testcase time="0.061000000000007" classname="utils" name="_returns_a_when_a_is_not_NULL_not_NA_and_has_length_0"/>
    <testcase time="0.00300000000001432" classname="utils" name="_returns_b_when_a_is_NULL"/>
    <testcase time="0.0029999999999859" classname="utils" name="_returns_b_when_a_is_NA"/>
    <testcase time="0.00399999999999068" classname="utils" name="_returns_b_when_a_is_an_empty_vector"/>
    <testcase time="0.00300000000001432" classname="utils" name="_returns_b_when_a_is_a_vector_with_length_0"/>
  </testsuite>
</testsuites>
